What happens when you initialize a repository? Why do you need to do it?
	When you initialize a repository, a hidden directory, .git, gets created. This directory does not contain any commits yet. You need to initiliaze a repository when you want to create your own repository and not clone another. 

How is the staging area different from the working directory and the repository? What value do you think it offers?
	The staging area is where you can choose to add any of your files in the working directory. When you make a commit, the contents of the staging area are saved, not every single file in the working directory. It helps you choose which files you want to have in a commit, instead of having to save all the files in a single commit, which may not be the most logical thing to do.

How can you use the staging area to make sure you have one commit per logical change?
	You can only add the files where the changes were made, or the changes made will be reflected to the staging area and then commit.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
	Branches are useful when you want to make a change in your code that changes the working of your code slightly. Then both the old and new codes are very similar and you want to keep both of them as it is. The changed code isn't "better" than the old one.

How do the diagrams help you visualize the branch structure?
	The diagrams show which branches contain which commits, the parent commits of all the commits and the reachability of each of the commits from the branches.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
	When two branches are merged, the changes introduced in both of them get combined into the final file. We represent it in the diagram to visualize the branch structure easily.

What are the pros and cons of Git’s automatic merging vs. always doing merges manually?
	Pros:
	1. You don't accidentally forget to merge your changes
	2. More user-friendly since you're not asking the user to merge changes every time
	Cons:
	1. Sometimes, Git will not know which code lines to keep and which to discard. At that point, if it merges some lines automatically, it might be wrong and could cause some serious bugs in your code. It then makes sense to ask the user to merge manually.